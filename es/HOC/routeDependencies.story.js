import React from 'react';
import PropTypes from 'prop-types';
import { createBrowserHistory } from 'history';
import { storiesOf } from '@storybook/react';
import { compose } from 'redux';
import { connect, Provider as StoreProvider } from 'react-redux';
import { routerMiddleware, connectRouter, ConnectedRouter, LOCATION_CHANGE } from 'connected-react-router';
import { configureStore } from '../../stories';
import routeDependencies from './routeDependencies';
export var history = createBrowserHistory();
var initialState = {
  users: {
    data: []
  }
};
var store = configureStore(initialState, {
  users: function users() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      data: []
    };
    var action = arguments.length > 1 ? arguments[1] : undefined;

    switch (action.type) {
      case 'SET_DATA':
        return {
          data: action.payload
        };

      case LOCATION_CHANGE:
        return {
          data: []
        };

      default:
        return state;
    }
  },
  router: connectRouter(history)
}, routerMiddleware(history));

var readAndSetData = function readAndSetData() {
  var readCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
  return {
    type: 'SET_DATA',
    payload: [{
      id: 1,
      name: 'Franta Vomáčka'
    }, {
      id: 2,
      name: 'Julian Zápotocký'
    }].slice(0, readCount)
  };
};

var UsersList = function UsersList(_ref) {
  var users = _ref.users,
      loadingText = _ref.loadingText;
  return React.createElement("ul", null, users.length === 0 && loadingText, users.map(function (user) {
    return React.createElement("li", {
      key: user.id
    }, user.name);
  }));
};

UsersList.propTypes = {
  users: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.number.isRequired,
    name: PropTypes.string.isRequired
  })).isRequired,
  loadingText: PropTypes.string.isRequired
};

var delayedDispatch = function delayedDispatch(dispatch, reduxAction) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    setTimeout(function () {
      return dispatch(reduxAction.apply(void 0, args));
    }, 3000);
  };
};

storiesOf('HOC/routeDependencies', module).addDecorator(function (story) {
  return React.createElement(StoreProvider, {
    store: store
  }, React.createElement(ConnectedRouter, {
    history: history
  }, story()));
}).add('default enter handler', function () {
  var UsersListContainer = compose(connect(function (state) {
    return {
      users: state.users.data
    };
  }, function (dispatch) {
    return {
      read: delayedDispatch(dispatch, readAndSetData)
    };
  }), routeDependencies())(UsersList);
  return React.createElement(UsersListContainer, {
    loadingText: "Na\u010D\xEDt\xE1m v\u0161echny u\u017Eivatele..."
  });
}).add('custom enter handler', function () {
  var UsersListContainer = compose(connect(function (state) {
    return {
      users: state.users.data
    };
  }, function (dispatch) {
    return {
      read: delayedDispatch(dispatch, readAndSetData)
    };
  }), routeDependencies({
    onRouteEnter: function onRouteEnter(_ref2) {
      var read = _ref2.read;

      if (typeof read === 'function') {
        read(1);
      }
    }
  }))(UsersList);
  return React.createElement(UsersListContainer, {
    loadingText: "Na\u010D\xEDt\xE1m prvn\xEDho u\u017Eivatele..."
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,