function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

import { compose } from 'redux';
import { withRouter } from 'react-router';
import { lifecycle, pure, mapProps } from 'recompose';
import { identity, defaults } from 'lodash';
var logger = console;
var log = {
  error: {
    routeEnter: function routeEnter(_routeEnter) {
      logger.warn("The onRouteEnter has to be a function. You have supplied: ".concat(_typeof(_routeEnter)));
    },
    routeLeave: function routeLeave(_routeLeave) {
      logger.warn("The onRouteLeave has to be a function. You have supplied: ".concat(_typeof(_routeLeave)));
    },
    reRoute: function reRoute(_reRoute) {
      logger.warn("The shouldReRoute has to be a function. You have supplied: ".concat(_typeof(_reRoute)));
    }
  }
};

var enterHandler = function enterHandler(props) {
  if (typeof props.read === 'function') {
    props.read();
  }
};

var leaveHandler = function leaveHandler(props) {
  if (typeof props.clear === 'function') {
    props.clear();
  }
};

var reRouteHandler = function reRouteHandler(oldProps, newProps) {
  return oldProps.location.pathname !== newProps.location.pathname || oldProps.location.search !== newProps.location.search || oldProps.location.hash !== newProps.location.hash;
};

var routeDependencies = function routeDependencies(config) {
  var defaultConfig = {
    onRouteEnter: enterHandler,
    onRouteLeave: leaveHandler,
    shouldReRoute: reRouteHandler,
    propsMapping: identity
  };

  var _defaults = defaults(config, defaultConfig),
      onRouteEnter = _defaults.onRouteEnter,
      onRouteLeave = _defaults.onRouteLeave,
      shouldReRoute = _defaults.shouldReRoute,
      propsMapping = _defaults.propsMapping;

  return compose(withRouter,
  /* tslint:disable no-invalid-this */
  lifecycle({
    componentDidMount: function componentDidMount() {
      if (typeof onRouteEnter !== 'function') {
        log.error.routeEnter(onRouteEnter);
      } else {
        onRouteEnter(this.props);
      }
    },
    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (typeof shouldReRoute !== 'function') {
        log.error.reRoute(shouldReRoute);
      } else if (typeof onRouteEnter !== 'function') {
        log.error.routeEnter(onRouteEnter);
      } else if (typeof onRouteLeave !== 'function') {
        log.error.routeLeave(onRouteLeave);
      } else if (shouldReRoute(prevProps, this.props)) {
        onRouteLeave(this.props);
        onRouteEnter(this.props);
      }
    },
    componentWillUnmount: function componentWillUnmount() {
      if (typeof onRouteLeave !== 'function') {
        log.error.routeLeave(onRouteLeave);
      } else {
        onRouteLeave(this.props);
      }
    }
  }),
  /* tslint:enable no-invalid-this */
  pure, mapProps(propsMapping));
};

export default routeDependencies;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,